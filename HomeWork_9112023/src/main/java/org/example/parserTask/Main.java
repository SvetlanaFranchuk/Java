package org.example.parserTask;


import org.example.parserTask.exceptions.CommandLineParserException;
import org.example.parserTask.parser.CommandLineParser;

public class Main {
        public static void main(String[] args) throws CommandLineParserException {
            try {CommandLineParser.parser(args);
            }catch (CommandLineParserException e){
                System.out.println(e.getMessage());
            }
        }
}

//Что можно улучшить:
//1 Класс setting.Setting можно сделать record или сделать поля финальными и использовать конструктор вместо сеттеров.
//2 Имя поля ListNextFile должно быть с маленькой буквы. Раз у Вас есть конструктор, то инициализацию полей sortMode и
// ListNextFile значениями по умолчанию лучше было сделать в нём. Если откажетесь от сеттеров, можно оставить, как есть.
//3 Классы parser.CommandLineParser и Settings должны быть в отдельных от Main пакетах/
//4 Давать своим классам имена стандартных классов - плохая практика.
// Переименуйте IllegalArgumentException и NullPointerException. Вообще достаточно одного проверяемого исключения.
// Его можно назвать CommandLineParserException, например. В основной программе сразу будет понятно,
// что если поймали такое исключение, то ошибка на этапе парсинга.
// В реальных программов таких этапов может быть много, и на каждый нужно адекватно отреагировать.
//5 В основной программе отловите исключение парсера, выведите в консоль сообщение об ошибке парсинга и причину ошибки.




//1 Напишите класс parser.CommandLineParser. Парсер должен принять аргументы командной строки, переданных в программу
// и превратить их в экземпляр класса настройки некой сортировки по следующим правилам:
//a. режим сортировки (-a или -d), необязательный, по умолчанию сортируем по возрастанию;
//b. тип данных (-s или -i), обязательный;
//c. имя выходного файла, обязательное;
//d. остальные параметры – имена входных файлов, не менее одного.
//Примеры запуска из командной строки для Windows:
//sort-it.exe -i -a out.txt in.txt (для целых чисел по возрастанию) sort-it.exe -s out.txt in1.txt in2.txt in3.txt
// (для строк по возрастанию) sort-it.exe -d -s out.txt in1.txt in2.txt (для строк по убыванию)
//2 Если переданы неправильные данные, то парсер должен выбросить собственное checked-исключение.
//3 В основной программе создайте экземпляр парсера и передайте ему аргументы командной строки запуска программы.
// Обработайте необходимые исключения.